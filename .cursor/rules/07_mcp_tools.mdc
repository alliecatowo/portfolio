---
description: 
globs: 
alwaysApply: false
---
# MCP Tool Usage Guidelines

## Available MCP Tools

During the development process, you can use the following MCP (Machine Control Protocol) tools to help with various tasks:

### Puppeteer Tools for Browser Automation

- **mcp__puppeteer_navigate**: Navigate to a URL
  - Usage: When you need to visit a website to check documentation, test deployed site, etc.

- **mcp__puppeteer_screenshot**: Take a screenshot of the current page or element
  - Usage: To capture visual state of the site for review or debugging

- **mcp__puppeteer_click**: Click an element on the page
  - Usage: For testing user interactions or navigating through sites

- **mcp__puppeteer_fill**: Fill out an input field
  - Usage: For form testing or automating inputs

- **mcp__puppeteer_select**: Select an element on the page with Select tag
  - Usage: For dropdown menu interactions

- **mcp__puppeteer_hover**: Hover an element on the page
  - Usage: For testing hover states or revealing hidden menus

- **mcp__puppeteer_evaluate**: Execute JavaScript in the browser console
  - Usage: For advanced testing or manipulation of page content

### GitHub Integration Tools

- **mcp__create_or_update_file**: Create or update a file in a GitHub repository
  - Usage: For version control and code sharing

- **mcp__search_repositories**: Search for GitHub repositories
  - Usage: To find examples or reference code

- **mcp__create_repository**: Create a new GitHub repository
  - Usage: For setting up a new project repository

- **mcp__get_file_contents**: Get contents of a file from a GitHub repository
  - Usage: To examine code from other repositories

- **mcp__push_files**: Push multiple files to GitHub in a single commit
  - Usage: For bulk file uploads or project initialization

- **mcp__create_issue**: Create a new issue in a GitHub repository
  - Usage: For tracking bugs or feature requests

- **mcp__create_pull_request**: Create a new pull request
  - Usage: For submitting changes for review

- **mcp__fork_repository**: Fork a GitHub repository
  - Usage: To create a personal copy of a repository

- **mcp__create_branch**: Create a new branch in a GitHub repository
  - Usage: To work on features or fixes separately

- **mcp__list_commits**: Get list of commits in a branch
  - Usage: To review change history

- **mcp__list_issues**: List issues in a GitHub repository
  - Usage: To track progress or find specific problems

- **mcp__update_issue**: Update an existing issue
  - Usage: To update status or add information

- **mcp__add_issue_comment**: Add a comment to an existing issue
  - Usage: For discussions on specific issues

- **mcp__search_code**: Search for code across GitHub repositories
  - Usage: To find specific code patterns or examples

- **mcp__search_issues**: Search for issues across GitHub repositories
  - Usage: To find solutions for common problems

- **mcp__search_users**: Search for users on GitHub
  - Usage: To find collaborators or specific contributors

- **mcp__get_issue**: Get details of a specific issue
  - Usage: To examine issue information

## Best Practices for MCP Tool Usage

### General Guidelines

1. **Use tools with purpose**: Only use tools when they directly contribute to completing a task
2. **Minimize tool calls**: Group related operations to reduce unnecessary calls
3. **Handle errors gracefully**: Always include error handling when using external tools
4. **Document tool usage**: Comment code that relies on MCP tools for future reference
5. **Use appropriate authentication**: For GitHub operations, ensure proper credentials are used

### Browser Automation Guidelines

1. **Test locally first**: Before automating browser interactions, verify the site works manually
2. **Capture meaningful screenshots**: When taking screenshots, include relevant context
3. **Use selectors carefully**: Ensure selectors are specific and unlikely to change
4. **Add appropriate waits**: Include waits for elements to load before interacting
5. **Clean up after automation**: Close browsers and sessions when finished

### GitHub Integration Guidelines

1. **Follow Git best practices**: Use meaningful commit messages and organize changes logically
2. **Protect sensitive information**: Never commit secrets, tokens, or personal information
3. **Create focused PRs**: Keep pull requests targeted to specific features or fixes
4. **Add context to issues**: Include clear descriptions and reproduction steps
5. **Use appropriate visibility**: Consider whether repos should be public or private

## Tool Usage Patterns

### Pattern: Setting Up a New Repository

```
1. Use mcp__create_repository to create a new GitHub repository
2. Use mcp__push_files to initialize with basic project structure
3. Use mcp__create_branch to set up development branch
```

### Pattern: Continuous Deployment Testing

```
1. Use mcp__puppeteer_navigate to visit the deployed site
2. Use mcp__puppeteer_screenshot to capture the current state
3. Use mcp__puppeteer_evaluate to run tests or check console errors
```

### Pattern: Issue Management

```
1. Use mcp__create_issue to document a discovered bug
2. Use mcp__create_branch to create a fix branch
3. Use mcp__create_or_update_file to implement the fix
4. Use mcp__create_pull_request to submit the changes
```

## When to Ask for Human Input

Ask the user for input when:

1. Authentication is required for external services
2. Critical design decisions need to be made
3. Security-sensitive operations are needed
4. Deployment to production environments is required
5. Domain configuration changes are needed
6. Payment or billing information is required

## Tool Access Verification

Before using an MCP tool, verify:

1. The tool is available in the current environment
2. You have the necessary permissions to use it
3. All required parameters are properly defined
4. You understand the expected outcome of using the tool

## Error Handling Strategies

When MCP tools return errors:

1. Retry with modified parameters if appropriate
2. Try an alternative approach if the tool is not working
3. Document the error and potential causes
4. Ask for human input if the error persists
5. Log the error for future reference 