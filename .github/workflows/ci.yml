name: CI

on:
  pull_request:
    branches: [main, staging]
  push:
    branches: [main, staging]

env:
  FORCE_COLOR: 1
  CI: true
  TERM: xterm-256color

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pnpm-store-path: ${{ steps.pnpm-cache.outputs.pnpm-store-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Install tools via mise
        run: mise install

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm-store-path=$(cd frontend && pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: cd frontend && pnpm install --frozen-lockfile

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run typecheck
        run: |
          cd frontend && pnpm exec nuxi typecheck --colors || {
            echo "::error title=TypeScript Error::TypeScript compilation failed"
            exit 1
          }

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run lint
        run: cd frontend && pnpm exec eslint . --ext .js,.ts,.vue --color --cache --cache-location .eslintcache

  build:
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          pnpm run build || {
            echo "::error title=Build Error::Application build failed"
            exit 1
          }

      - name: Debug - Verify build output
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Looking for .output directory:"
          ls -la .output || echo ".output directory not found"
          echo "Contents of .output if it exists:"
          ls -la .output/ || echo "Cannot list .output contents"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .output/
          retention-days: 1

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run tests
        run: cd frontend && pnpm test

  commitlint:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Install tools via mise
        run: mise install

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint commits
        run: |
          pnpm exec commitlint --from=origin/${{ github.base_ref }} --to=HEAD || {
            echo "::error title=Commit Lint Error::One or more commit messages do not follow conventional format"
            exit 1
          }

  firebase-preview:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    permissions:
      checks: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for deployment
        run: pnpm run build

      - name: Deploy to Firebase Hosting Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ALLIE_PORTFOLIO_PROJECT }}
          projectId: allie-portfolio-project

  firebase-production:
    if: github.ref == 'refs/heads/production'
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mise (Node, pnpm)
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.setup.outputs.pnpm-store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for deployment
        run: pnpm run build

      - name: Deploy to Firebase Hosting Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ALLIE_PORTFOLIO_PROJECT }}
          channelId: live
          projectId: allie-portfolio-project

  # Summary job to report overall CI status
  ci-success:
    if: always()
    needs: [setup, typecheck, lint, build, test, commitlint, firebase-preview, firebase-production]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          # Check if any required job failed
          if [[ "${{ needs.setup.result }}" == "failure" || 
                "${{ needs.typecheck.result }}" == "failure" || 
                "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                ("${{ needs.commitlint.result }}" == "failure" && "${{ github.event_name }}" == "pull_request") ]]; then
            echo "::error::One or more required CI jobs failed"
            exit 1
          fi

          # Firebase jobs can be skipped, that's OK
          echo "All CI checks passed! âœ…"
